import java.text.SimpleDateFormat
import java.util.Date

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.1.6'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:3.3.1'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'org.springframework.boot' version '3.3.4'
}

apply plugin: 'io.spring.dependency-management'

ext {
    extenderVersion = findProperty('extenderVersion') ?: '1.4.47'
}

configurations {
    // A configuration meant for consumers that need the API of this component
    implementation {
        canBeResolved = true
    }
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

repositories {
    mavenCentral()
}

sourceCompatibility = '17'
targetCompatibility = '17'

dependencyManagement {
    imports {
        mavenBom 'com.google.cloud:spring-cloud-gcp-dependencies:5.5.0'
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }

    implementation('com.googlecode.json-simple:json-simple:1.1.1') {
        exclude module: 'junit'
    }

    implementation('com.google.cloud:spring-cloud-gcp-starter-storage')
    implementation('com.google.cloud:spring-cloud-gcp-starter-logging')
    implementation('com.google.cloud:google-cloud-compute:1.59.0')
    implementation('com.google.guava:guava:33.2.1-jre')
    implementation('com.samskivert:jmustache:1.16')
    implementation('commons-chain:commons-chain:1.2')
    implementation('org.apache.commons:commons-fileupload2-jakarta:2.0.0-M1')
    implementation('org.apache.commons:commons-text:1.12.+')
    implementation('org.apache.commons:commons-compress:1.27.+')
    implementation('org.apache.commons:commons-lang3:3.17.0')
    implementation('org.apache.httpcomponents:httpclient:4.5.14')
    implementation('org.apache.httpcomponents:httpmime:4.5.13')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-jetty')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.security:spring-security-test')
    implementation('io.micrometer:micrometer-core:1.13.1')
    implementation('io.micrometer:micrometer-tracing:1.3.4')
    implementation('io.micrometer:micrometer-tracing-bridge-otel:1.3.4')
    runtimeOnly('net.logstash.logback:logstash-logback-encoder:8.0')
    runtimeOnly('io.micrometer:micrometer-registry-influx:1.13.2')
    runtimeOnly('io.micrometer:micrometer-registry-prometheus:1.13.2')

    testImplementation('junit:junit:4.13.2')
    testImplementation('org.springframework:spring-test')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.micrometer:micrometer-tracing-test')
    testImplementation('io.micrometer:micrometer-tracing-integration-test')
    testImplementation('org.smali:dexlib2:2.5.2')
    testImplementation project(':client')
}

task createVersionFile() {
    def sha = System.getenv("COMMIT_SHORT_SHA")
    if (sha == null) {
        def outputStream = new ByteArrayOutputStream()
        try {
            def gen_result = exec {
                commandLine "git", "rev-parse", "--short", "HEAD"
                standardOutput = outputStream
                ignoreExitValue = true
            }
            if (gen_result.exitValue == 0 ) {
                sha = outputStream.toString().trim()
            } else {
                sha = "unknown_commit"
            }
        } catch (Exception exc) {
            sha = "unknown_commit"
        }
    }
    def build_time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date ())
    def text = """
// Auto generated by gradle

package com.defold.extender;
public class Version {
    public static final String gitVersion = "${sha}";
    public static final String buildTime = "${build_time}";
}
"""
    def binding = ["sha" : sha, "build_time" : build_time]

    def engine = new groovy.text.SimpleTemplateEngine()
    def template = engine.createTemplate(text).make(binding)

    new File(projectDir.toString() + "/src/main/java/com/defold/extender", "Version.java").text = template.toString()
    project.ext.set("outSha", sha)
}

compileJava {
    dependsOn createVersionFile
}

// Creates the full jar file, with the extender server classes included
bootJar {
    archiveBaseName = 'extender'
    version = project.ext.extenderVersion
    doLast {
        copy {
            from "${project.projectDir}/build/libs/extender-${project.ext.extenderVersion}.jar"
            into "app"
            rename { String fileName ->
                fileName.replace("-$project.ext.extenderVersion", "")
            }
        }
    }
}

// Builds the extender server base classes into a .jar file
jar {
    archiveBaseName = 'extender-base'
    version = project.ext.extenderVersion
    archiveClassifier = '' // use empty string to avoid the 'plain' suffix
}

publishing {
  publications {
    extender(MavenPublication) {
      artifact bootJar
      groupId 'com.defold.extender'
      artifactId 'server'
      version project.ext.extenderVersion
    }
  }
}

task buildStandalone() {
    dependsOn 'build', ':manifestmergetool:mainJar'
    doLast {
        copy {
            from(project.projectDir) {
                include "users/**"
            }
            into "build/standalone"
        }
        copy {
            from("docker-base") {
                include "template.*"
            }
            into "build/standalone"
        }
        copy {
            from bootJar
            into "build/standalone"
        }
        copy {
            from project(':manifestmergetool').collect { it.tasks.withType(Jar) }
            into "build/standalone"
        }
    }
}
