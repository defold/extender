buildscript {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'java-library'

ext {
    manifestMergetoolVersion = findProperty('manifestMergetoolVersion') ?: '0.5.0'
}

jar {
    archiveBaseName = '_manifestmergetool'
    enabled = true
    archiveClassifier = '' // use empty string to avoid the 'plain' suffix
}


configurations {
    // A configuration meant for consumers that need the API of this component
    implementation {
        canBeResolved = true
    }
    all*.exclude group: 'com.android.tools', module: 'repository'
    all*.exclude group: 'com.android.tools', module: 'sdklib'
}

task mainJar(type: Jar) {
    version =  project.ext.manifestMergetoolVersion
    archiveBaseName = 'manifestmergetool'
    manifest {
        attributes 'Main-Class': 'com.defold.manifestmergetool.ManifestMergeTool'
    }
    from {
        configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    duplicatesStrategy DuplicatesStrategy.WARN
    with jar
        doLast {
        copy {
            from "${project.projectDir}/build/libs/manifestmergetool-${project.ext.manifestMergetoolVersion}.jar"
            into "${project.projectDir}/../app"
            rename { String fileName ->
                fileName.replace("-$project.ext.manifestMergetoolVersion", "")
            }
        }
    }
}

publishing {
  publications {
    manifestMergeTool(MavenPublication) {
      artifact mainJar
      groupId 'com.defold.extender'
      artifactId 'manifestmergetool'
      version project.ext.manifestMergetoolVersion
    }
  }
}

repositories {
    mavenCentral()
    maven { url "https://maven.google.com" }
}

dependencies {
    implementation('org.jsoup:jsoup:1.18.1')
    implementation('com.android.tools.build:manifest-merger:31.4.1')
    implementation('com.android.tools:common:31.4.1')
    implementation('org.apache.commons:commons-configuration2:2.10.1')
    implementation('commons-codec:commons-codec:1.17.0')

    testImplementation('commons-io:commons-io:2.11.0')
    testImplementation('junit:junit:4.13.2')
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}
